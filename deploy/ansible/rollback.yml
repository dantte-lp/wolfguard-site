---
# WolfGuard Website Rollback Playbook
# This playbook handles rolling back to the previous deployment version

- name: Rollback WolfGuard Website
  hosts: production
  become: yes
  gather_facts: yes

  tasks:
    - name: Check available backups
      command: "podman images --quiet wolfguard-site"
      register: available_images
      changed_when: false

    - name: Display available images
      debug:
        msg: "Available images: {{ available_images.stdout_lines }}"

    - name: Stop current container
      command: "podman stop wolfguard-site"
      ignore_errors: yes

    - name: List backup images
      shell: "podman images wolfguard-site --format '{{ '{{.Tag}}' }}' | grep -E 'backup|latest' | head -5"
      register: backups
      changed_when: false

    - name: Display backup images
      debug:
        msg: "Available backups: {{ backups.stdout_lines }}"

    - name: Find latest backup image
      shell: |
        podman images wolfguard-site --format '{{.Repository}}:{{.Tag}}' | \
        grep backup | \
        sort -r | \
        head -1
      register: latest_backup
      changed_when: false

    - name: Check if backup exists
      assert:
        that:
          - latest_backup.stdout != ""
        fail_msg: "No backup image found for rollback!"

    - name: Remove failed container
      command: "podman rm wolfguard-site"
      ignore_errors: yes

    - name: Restore from backup
      command: |
        podman run \
          --name wolfguard-site \
          --detach \
          --restart=always \
          --memory=512m \
          --cpus=1 \
          --network traefik \
          --expose 3000 \
          --label traefik.enable=true \
          --label traefik.http.routers.wolfguard-site.rule="Host(\`wolfguard.io\`)" \
          --label traefik.http.routers.wolfguard-site.entrypoints=websecure \
          --label traefik.http.routers.wolfguard-site.tls.certresolver=letsencrypt \
          --label traefik.http.services.wolfguard-site.loadbalancer.server.port=3000 \
          {{ latest_backup.stdout }}
      register: restore_result

    - name: Wait for container to be ready
      pause:
        seconds: 5

    - name: Verify rollback health
      uri:
        url: "http://localhost:3000/"
        method: GET
        status_code: 200
      register: health_check
      retries: 5
      delay: 5
      until: health_check.status == 200
      ignore_errors: yes

    - name: Rollback status
      debug:
        msg:
          - "=== Rollback Complete ==="
          - "Restored image: {{ latest_backup.stdout }}"
          - "Container status: {{ restore_result.rc == 0 | ternary('Success', 'Failed') }}"
          - "Health check: {{ health_check.status | default('Failed') }}"

    - name: Send notification
      copy:
        content: |
          Rollback Notification
          ====================
          Date: {{ ansible_date_time.iso8601 }}
          Reason: Automated rollback triggered
          Restored Image: {{ latest_backup.stdout }}
          Health Status: {{ health_check.status | default('Unknown') }}

          The WolfGuard website has been rolled back to the previous version.
        dest: /opt/wolfguard-site/ROLLBACK_NOTIFICATION.txt
      ignore_errors: yes
