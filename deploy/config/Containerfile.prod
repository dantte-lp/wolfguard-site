# syntax=docker/dockerfile:1.4
# Multi-stage Containerfile for WolfGuard Site (Next.js Standalone)
# Built with Buildah, runs with Podman + crun runtime
# Uses Next.js standalone output (recommended by Vercel)

# ==============================================================================
# Stage 1: Dependencies Installation
# ==============================================================================
FROM docker.io/library/node:lts-trixie-slim AS deps

# OCI Labels - Dependencies Stage
LABEL org.opencontainers.image.title="WolfGuard Site Dependencies"
LABEL org.opencontainers.image.description="Dependency installation stage"
LABEL org.opencontainers.image.vendor="WolfGuard"

WORKDIR /app

# Install build dependencies
RUN apt-get update && apt-get install -y --no-install-recommends \
    python3 \
    make \
    g++ \
    && rm -rf /var/lib/apt/lists/*

# Copy package files
COPY package*.json ./

# Install dependencies (including devDependencies for build)
RUN npm ci

# ==============================================================================
# Stage 2: Build Stage
# ==============================================================================
FROM docker.io/library/node:lts-trixie-slim AS builder

# OCI Labels - Build Stage
LABEL org.opencontainers.image.title="WolfGuard Site Builder"
LABEL org.opencontainers.image.description="Build stage for WolfGuard site"
LABEL org.opencontainers.image.vendor="WolfGuard"

WORKDIR /app

# Copy dependencies from deps stage
COPY --from=deps /app/node_modules ./node_modules

# Copy application source
COPY . .

# Set production environment
ENV NODE_ENV=production
ENV NEXT_TELEMETRY_DISABLED=1

# Build Next.js application with standalone output
RUN npm run build

# ==============================================================================
# Stage 3: Production Runtime Stage
# ==============================================================================
FROM docker.io/library/node:lts-trixie-slim AS runtime

# OCI Labels - Production Stage
LABEL org.opencontainers.image.title="WolfGuard Site"
LABEL org.opencontainers.image.description="WolfGuard landing page - Next.js standalone server"
LABEL org.opencontainers.image.vendor="WolfGuard"
LABEL org.opencontainers.image.licenses="GPLv3"
LABEL org.opencontainers.image.source="https://github.com/dantte-lp/wolfguard-site"
LABEL org.opencontainers.image.documentation="https://github.com/dantte-lp/wolfguard-site/README.md"
LABEL org.opencontainers.image.version="1.0.0"
LABEL org.opencontainers.image.created="${BUILD_DATE}"
LABEL org.opencontainers.image.revision="${GIT_COMMIT}"

WORKDIR /app

# Install runtime dependencies and security updates
RUN apt-get update && apt-get upgrade -y && \
    apt-get install -y --no-install-recommends \
    ca-certificates \
    tzdata \
    wget \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

# Create non-root user
RUN groupadd -g 1001 nodejs && \
    useradd -u 1001 -g nodejs -s /bin/bash -m nextjs

# Set production environment
ENV NODE_ENV=production
ENV NEXT_TELEMETRY_DISABLED=1
ENV PORT=3000
ENV HOSTNAME="0.0.0.0"

# Copy Next.js standalone output
COPY --from=builder --chown=nextjs:nodejs /app/.next/standalone ./
COPY --from=builder --chown=nextjs:nodejs /app/.next/static ./.next/static
COPY --from=builder --chown=nextjs:nodejs /app/public ./public

# Verify build output
RUN test -f server.js || (echo "Error: server.js not found in standalone output" && exit 1)

# Switch to non-root user
USER nextjs

# Expose port 3000
EXPOSE 3000

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=10s --retries=3 \
    CMD wget --no-verbose --tries=1 --spider http://localhost:3000/ || exit 1

# Start Next.js server
CMD ["node", "server.js"]
